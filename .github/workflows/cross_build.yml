name: Cross Build All

on:
  workflow_dispatch:
  push:
    tags:
      - '20*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: install requirements
        run: |
          python3 cross_build.py --install_requirements=True

      - name: install cargo zig build
        run: |
          python3 cross_build.py --install_cargo_zig_build=True

      - name: add rust targets
        run: |
          python3 cross_build.py --add_rust_targets=True

      - name: build x86_64-pc-windows-gnu
        run: |
          python3 cross_build.py --build_rust_targets=True --target=x86_64-pc-windows-gnu

      - name: build aarch64-pc-windows-gnullvm
        run: |
          python3 cross_build.py --build_rust_targets=True --target=aarch64-pc-windows-gnullvm

      - name: build x86_64-apple-darwin
        run: |
          python3 cross_build.py --build_rust_targets=True --target=x86_64-apple-darwin

      - name: build aarch64-apple-darwin
        run: |
          python3 cross_build.py --build_rust_targets=True --target=aarch64-apple-darwin

      - name: build x86_64-unknown-linux-gnu
        run: |
          python3 cross_build.py --build_rust_targets=True --target=x86_64-unknown-linux-gnu

      - name: build aarch64-unknown-linux-gnu
        run: |
          python3 cross_build.py --build_rust_targets=True --target=aarch64-unknown-linux-gnu

      - name: package rust targets
        run: |
          python3 cross_build.py --package_rust_targets=True --check_build_results=True

      - name: list artifacts
        run: |
          echo "current_tag=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "previous_tag=$(git tag --sort=-creatordate | grep -E '^[0-9]{4}\.[0-9]{2}\.[0-9]{2}' | grep -v $(git describe --tags --abbrev=0) | head -n 1)" >> $GITHUB_ENV
          echo "x86_64_pc_windows_file_name=$(basename $(ls target/cross_build/x86_64-pc-windows*.zip))" >> $GITHUB_ENV
          echo "aarch64_pc_windows_file_name=$(basename $(ls target/cross_build/aarch64-pc-windows*.zip))" >> $GITHUB_ENV
          echo "x86_64_apple_darwin_file_name=$(basename $(ls target/cross_build/x86_64-apple-darwin*.xz))" >> $GITHUB_ENV
          echo "aarch64_apple_darwin_file_name=$(basename $(ls target/cross_build/aarch64-apple-darwin*.xz))" >> $GITHUB_ENV
          echo "x86_64_unknown_linux_file_name=$(basename $(ls target/cross_build/x86_64-unknown-linux*.xz))" >> $GITHUB_ENV
          echo "aarch64_unknown_linux_file_name=$(basename $(ls target/cross_build/aarch64-unknown-linux*.xz))" >> $GITHUB_ENV

      - name: run asc x86_64-unknown-linux-gnu
        run: |
          echo "current tag: $(git describe --tags --abbrev=0)"
          echo "previous tag: $(git tag --sort=-creatordate | grep -E '^[0-9]{4}\.[0-9]{2}\.[0-9]{2}' | grep -v $(git describe --tags --abbrev=0) | head -n 1)"
          echo "git log stat:"
          git log -1 --stat
          echo "asc version:"
          ./target/x86_64-unknown-linux-gnu/release/asc --version
          echo "asc help:"
          ./target/x86_64-unknown-linux-gnu/release/asc --help

      - name: release asc
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.current_tag }}
          tag_name: ${{ github.ref }}
          make_latest: true
          fail_on_unmatched_files: true
          body: |
            **Full Changelog**: https://github.com/ascpkg/asc/compare/${{ env.previous_tag }}...${{ env.current_tag }}
          files: |
            target/cross_build/${{ env.x86_64_pc_windows_file_name }}
            target/cross_build/${{ env.aarch64_pc_windows_file_name }}
            target/cross_build/${{ env.x86_64_apple_darwin_file_name }}
            target/cross_build/${{ env.aarch64_apple_darwin_file_name }}
            target/cross_build/${{ env.x86_64_unknown_linux_file_name }}
            target/cross_build/${{ env.aarch64_unknown_linux_file_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
